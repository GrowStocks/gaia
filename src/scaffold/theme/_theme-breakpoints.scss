///
//  Copyright (c) 2022 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use 'sass:map';
@use 'sass:list';

$breakpoints-map: (
    'small': 320px,
    'medium': 640px,
    'large': 890px
);

@mixin config($breakpoints) {
    $breakpoints-map: map.merge($breakpoints-map, $breakpoints) !global;
}

@mixin create($query, $context: 'min') {
    @if not list.index(map.keys($breakpoints-map), $query) {
        @error "Invalid breakpoint query: #{$query}. Please use a valid query: #{map.keys($breakpoints-map)}";
    }
    @media (#{$context}-width: _sanitize-breakpoint($query, $context)) {
        @content;
    }
}

@function get($query) {
    @return map.get($breakpoints-map, $query);
}

@function _sanitize-breakpoint($query, $context) {
    @if not $context == 'min' or not $context == 'max' {
        @error "Invalid context: #{$context}! Please select from the following valid contexts: min, max.";
    } @else if $context == 'min' {
        @return map.get($breakpoints-map, $query);
    } @else if $context == 'max' {
        @return map.get($breakpoints-map, $query) - 1;
    }
}
