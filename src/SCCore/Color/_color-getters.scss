//
// Copyright (c) 2021 GrowStocks
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

@use 'sass:map';
@use 'sass:list';
@use 'sass:color';
@use 'sass:math';

@use '../Theme/theme-keys' as key;
@use '../Feature';

@use 'color-validators' as validator;
@use 'color-math' as color-math;

@function get-color_(
    $color-map,
    $type,
    $query,
    $settings: ('', '')
) {
    $component-name: list.nth($settings, 1);
    $prefix: list.nth($settings, 2);

    @if validator.is-color-type_($query) {
        @if Feature.validate-data-type('map', $color-map) {
            $_color-map: map.get($color-map, $query);

            @if ($query == 'default') {
                $key-variant: '';

                @if $type == 'fill' {
                    @return key.create('#{$component-name}-fill#{$key-variant}', list.nth($_color-map, 1), $prefix);
                } @else if $type == 'ink' {
                    @return key.create('#{$component-name}-ink#{$key-variant}', list.nth($_color-map, 2), $prefix);
                } @else {
                    @error 'Invalid query: #{$type}. Please choose from the following valid selectors: "fill", "ink".';
                }

            } @else if ($query == 'elevation') or ($query == 'outline') {

                @return list.nth($_color-map, 1);

            } @else {

                $key-variant: '--#{$query}';

                @if $type == 'fill' {
                    @if ($query == 'elevation') or ($query == 'outline') {
                        @return list.nth($_color-map, 1);
                    }
                    @return key.create('#{$component-name}-fill#{$key-variant}', list.nth($_color-map, 1), $prefix);
                } @else if $type == 'ink' {
                    @return key.create('#{$component-name}-ink#{$key-variant}', list.nth($_color-map, 2), $prefix);
                } @else {
                    @error 'Invalid query: #{$type}. Please choose from the following valid selectors: "fill", "ink".';
                }
            }
        }
    }
}

@function get-complement_($color) {
    $_complement: saturate(lighten($color, 30%), 100%);
    @return adjust-hue($_complement, 180deg);
}

@function get-scope_($scope) {
    $valid: validator.is-scope_($scope);
    @if $valid {
        @return $scope;
    }
}

@function _get-linear($color) {
    @if $color <= 0.4045 {
        @return math.div($color, 12.92);
    } @else {
        @return math.pow(math.div($color + 0.055, 1.055), 2.4);
    }
}

@function _get-luminance($color) {
    $r: _get-linear(math.div(color.red($color), 255));
    $g: _get-linear(math.div(color.green($color), 255));
    $b: _get-linear(math.div(color.blue($color), 255));

    @return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b);
}

$_white-lumen: _get-luminance(#ffffff);

@function get-ink($fill) {
    @if Feature.validate-data-type('map', $fill) {
        @if math.abs(_get-luminance(map.get($fill, 'default')) - $_white-lumen) > 0.7 {
            @return unquote('#fff');
        } @else {
            @return unquote('#000');
        }
    }
}

@function get-rgb_($color) {
    @return color.red($color), color.green($color), color.blue($color);
}
