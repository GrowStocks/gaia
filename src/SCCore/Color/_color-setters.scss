//
// Copyright (c) 2021 GrowStocks
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';

@use '../Feature';
@use '../Elevation';

@use 'color-validators' as validator;
@use 'color-getters' as getter;

@mixin apply(
    $scope,
    $color-theme,
    $query-settings: ('has-elevation'),
    $scope-exceptions: (),
) {
    $_scope: getter.get-scope_($scope);
    $_scope-exceptions: $scope-exceptions;
    $_query-settings: $query-settings;
    $_elevation-color: ();

    $_init-color-theme: (
        'outline': #c4c4c4,
        'elevation': #000,
    );

    $_color-theme: map.merge($_init-color-theme, $color-theme);

    // Type: hex-value
    $_outline-color: getter.get-color_($_color-theme, 'fill', 'outline');
    $_elevation-color: getter.get-color_($_color-theme, 'fill', 'elevation');

    // Type: percent
    $_outline-opacity: 50%;

    @if Feature.has-item($_scope-exceptions, $_scope) {
        @error 'The color scope '#{$_scope}' is disabled in this component. Please select another color scope.';
    }

    @if Feature.has-item($_scope, 'text') {
        color: getter.get-color_($color-theme, 'fill', 'default');
        border: 1px solid rgba(0 0 0 / 0);
        background: hsl(0 0% 0% / 0);
        @include Elevation.apply(0, $_elevation-color);

        @if Feature.has-property($color-theme, 'hover') {
            &:hover {
                color: getter.get-color_($color-theme, 'fill', 'hover');
                cursor: pointer;
            }
        }

        @if Feature.has-property($color-theme, 'focus') {
            &:focus {
                color: getter.get-color_($color-theme, 'fill', 'focus');
                cursor: pointer;
                outline: 2px solid rgba($_outline-color, $_outline-opacity);
            }
        }

        @if Feature.has-property($color-theme, 'active') {
            &:active {
                color: getter.get-color_($color-theme, 'fill', 'active');
                cursor: pointer;
            }
        }

        @if Feature.has-property($color-theme, 'disabled') {
            &:disabled {
                color: getter.get-color_($color-theme, 'fill', 'disabled');
                cursor: not-allowed !important;
            }
        }
    }

    @if Feature.has-item($_scope, 'outlined') {
        color: getter.get-color_($color-theme, 'fill', 'default');
        border: 1px solid getter.get-color_($color-theme, 'fill', 'default');
        background: rgba(0 0 0 / 0);
        @include Elevation.apply(0, $_elevation-color);

        @if Feature.has-property($color-theme, 'hover') {
            &:hover {
                color: getter.get-color_($color-theme, 'ink', 'default');
                background: getter.get-color_($color-theme, 'fill', 'default');
                border: 1px solid getter.get-color_($color-theme, 'fill', 'default');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(0, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'focus') {
            &:focus {
                // color: getter.get-color_($color-theme, 'ink', 'default');
                // background: getter.get-color_($color-theme, 'fill', 'default');
                border: 1px solid getter.get-color_($color-theme, 'fill', 'default');
                cursor: pointer;
                outline: 2px solid rgba($_outline-color, $_outline-opacity);

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(0, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'active') {
            &:active {
                color: getter.get-color_($color-theme, 'ink', 'active');
                background: getter.get-color_($color-theme, 'fill', 'active');
                border: 1px solid getter.get-color_($color-theme, 'fill', 'active');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(5, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'disabled') {
            &:disabled {
                color: getter.get-color_($color-theme, 'fill', 'disabled');
                border: 1px solid getter.get-color_($color-theme, 'fill', 'disabled');
                cursor: not-allowed !important;

                &:hover {
                    background: rgba(0 0 0 / 0%);
                }
            }
        }
    }

    @if Feature.has-item($_scope, 'filled') {
        color: getter.get-color_($color-theme, 'ink', 'default');
        border: 1px solid getter.get-color_($color-theme, 'fill', 'default');
        background: getter.get-color_($color-theme, 'fill', 'default');

        @if Feature.has-item($_query-settings, 'has-elevation') {
            @include Elevation.apply(0, $_elevation-color);
        }

        @if Feature.has-property($color-theme, 'hover') {
            &:hover {
                color: getter.get-color_($color-theme, 'ink', 'hover');
                border: 1px solid getter.get-color_($color-theme, 'fill', 'hover');
                background: getter.get-color_($color-theme, 'fill', 'hover');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(3, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'focus') {
            &:focus {
                color: getter.get-color_($color-theme, 'ink', 'focus');
                border: 1px solid getter.get-color_($color-theme, 'fill', 'focus');
                background: getter.get-color_($color-theme, 'fill', 'focus');
                cursor: pointer;
                outline: 2px solid rgba($_outline-color, $_outline-opacity);

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(3, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'active') {
            &:active {
                color: getter.get-color_($color-theme, 'ink', 'active');
                border: 1px solid getter.get-color_($color-theme, 'fill', 'active');
                background: getter.get-color_($color-theme, 'fill', 'active');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(7, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'disabled') {
            &:disabled {
                color: getter.get-color_($color-theme, 'ink', 'disabled');
                border: 1px solid getter.get-color_($color-theme, 'fill', 'disabled');
                background: getter.get-color_($color-theme, 'fill', 'disabled');
                cursor: not-allowed !important;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(0, $_elevation-color);
                }
            }
        }
    }
}
