//
// Copyright (c) 2021 GrowStocks
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';

@use '../Feature';
@use '../Elevation';

@use 'color-validators' as validator;
@use 'color-getters' as getter;

$prefix: 'sc' !default;

@mixin apply(
    $component-name,
    $color-theme,
    $scope,
    $key,
    $settings: ()
) {

    $_init-settings: (
        opt: ('has-elevation'),
        exceptions: (),
        elevation-level: 2
    );

    $_scope: getter.get-scope_($scope);
    $_scope-exceptions: map.get(map.merge($_init-settings, $settings), exceptions);
    $_settings: map.get(map.merge($_init-settings, $settings), opt);
    $_elevation-color: ();
    $_elevation-level: map.get(map.merge($_init-settings, $settings), elevation-level);

    $_init-color-theme: (
        'outline': #a0a0a0,
        'elevation': #000,
    );

    $_color-theme: map.merge($_init-color-theme, $color-theme);
    $_component-config: ($component-name, $prefix);

    // Type: color-value (hex, hsl, rgb/a, etc.)
    $_outline-color: getter.get-color_($_color-theme, 'fill', 'outline', $_component-config);
    $_elevation-color: getter.get-color_($_color-theme, 'fill', 'elevation', $_component-config);

    // Type: percent
    $_outline-opacity: 66%;

    @if Feature.has-item($_scope-exceptions, $_scope) {
        @error 'The color scope '#{$_scope}' is disabled in this component. Please select another color scope.';
    }

    @if Feature.has-item($_scope, 'text') {
        @include _set-ink($color-theme, $key, $_component-config, single);
        @include _set-border('transparent');
        @include _set-bg('transparent');
        box-shadow: none;

        @if $key == 'focus' or $key == 'active' {
            border: 1px solid rgba($_outline-color, $_outline-opacity);
        }
    }

    @if Feature.has-item($_scope, 'outlined') {

        @if $key == 'hover' or $key == 'focus' or $key == 'active' {
    
            @include _set-ink($color-theme, $key, $_component-config, contrast);
            @include _set-bg($color-theme, $key, $_component-config);
            @include _set-border($color-theme, $key, $_component-config);
            box-shadow: none;

        } @else {
    
            @include _set-ink($color-theme, $key, $_component-config, single);
            @include _set-bg('transparent');
            @include _set-border($color-theme, $key, $_component-config);
            box-shadow: none;

        }

        @if $key == 'focus' {
            outline: 2px solid rgba($_outline-color, $_outline-opacity);
        }
    }

    @if Feature.has-item($_scope, 'filled') or Feature.has-item($_scope, 'filled-raised') {
        @include _set-ink($color-theme, $key, $_component-config, contrast);
        @include _set-border($color-theme, $key, $_component-config);
        @include _set-bg($color-theme, $key, $_component-config);

        @if $key == 'focus' {
            outline: 2px solid rgba($_outline-color, $_outline-opacity);
        }

        @if Feature.has-item($_settings, 'has-elevation') {
            @if $_scope == 'filled' {
                @if $key == 'hover' or $key == 'focus' {
                    // @include Elevation.apply($_elevation-level, $_elevation-color);
                } @else if $key == 'active' {
                    // @include Elevation.apply(($_elevation-level + 2), $_elevation-color);
                } @else {
                    box-shadow: none;
                }
            } @else if $_scope == 'filled-raised' {
                @if $key == 'active' {
                    @include Elevation.apply(($_elevation-level + 4), $_elevation-color);
                } @else if $key == 'hover' or $key == 'focus' {
                    @include Elevation.apply(($_elevation-level + 2), $_elevation-color);
                } @else {
                    @include Elevation.apply(($_elevation-level), $_elevation-color);
                }
            }
        }
    }
}

@mixin _set-bg($color-or-map, $key: (), $config: ()) {
    @if $color-or-map == 'transparent' or $color-or-map == transparent {
        background: rgba(0 0 0 / 0);
    } @else if Feature.validate-data-type('map', $color-or-map) {
        background: getter.get-color_($color-or-map, 'fill', $key, $config);
    }
}

@mixin _set-border($color-or-map, $key: (), $config: ()) {
    @if $color-or-map == 'transparent' or $color-or-map == transparent {
        border: 1px solid rgba(0 0 0 / 0);
    } @else if Feature.validate-data-type('map', $color-or-map) {
        border: 1px solid getter.get-color_($color-or-map, 'fill', $key, $config);
    }
}

@mixin _set-ink($color-or-map, $key: (), $config: (), $context: single) {
    @if $color-or-map == 'transparent' or $color-or-map == transparent {
        color: 1px solid rgba(0 0 0 / 0);
    } @else if Feature.validate-data-type('map', $color-or-map) {
        @if $context == single {
            color: getter.get-color_($color-or-map, 'fill', $key, $config);
        } @else if $context == contrast {
            color: getter.get-color_($color-or-map, 'ink', $key, $config);
        }
    }
}
