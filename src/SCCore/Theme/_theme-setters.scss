//
//  Copyright (c) 2021 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';

@use '../Color/color-parsers';
@use '../Color/color-getters';
@use '../Shape';
@use '../Feature';

@use 'theme-getters' as getter;
@use 'theme-validators' as validator;
@use 'theme-keys' as key;

$prefix: 'sc';

$_state-map: (
    'error': (#b00020, #ffffff),
    'warning': (#ffa000, #000000),
    'success': (#25a53f, #ffffff),
) !default;

$_radius-theme: (
    'small': 0.3rem,
    'medium': 0.5rem,
    'large': 0.7rem
) !default;

@mixin config(
    $primary: #363636,
    $secondary: color-getters.get-complement_($primary),
    $radius: $_radius-theme,
    $user-tokens...
) {
    @if meta.type-of($primary) != map {
        $_color-map: color-parsers.split($primary);

        @each $property, $value in $_color-map {
            @if $property == 'default' {
                @include key.bind-token('primary', $value, $prefix);
            } @else {
                @include key.bind-token('primary-#{$property}', $value, $prefix);
            }
        }

    } @else if validator.is-variant_($primary) {
        $_properties: getter.get-variants_($primary);
        $_color-map: color-parsers.fill-missing($_properties, $primary);

        @each $property, $value in $_color-map {
            @if $property == 'default' {
                @include key.bind-token('primary', $value, $prefix);
            } @else {
                @include key.bind-token('primary-#{$property}', $value, $prefix);
            }
        }
    }

    @if meta.type-of($secondary) != map {
        $_color-map: color-parsers.split($secondary);

        @each $property, $value in $_color-map {
            @if $property == 'default' {
                @include key.bind-token('secondary', $value, $prefix);
            } @else {
                @include key.bind-token('secondary-#{$property}', $value, $prefix);
            }
        }

    } @else if validator.is-variant_($secondary) {
        $_properties: getter.get-variants_($secondary);
        $_color-map: color-parsers.fill-missing($_properties, $secondary);

        @each $property, $value in $_color-map {
            @if $property == 'default' {
                @include key.bind-token('secondary', $value, $prefix);
            } @else {
                @include key.bind-token('secondary-#{$property}', $value, $prefix);
            }
        }
    }

    @if meta.type-of($primary) == map {
        @if Feature.has-property($primary, 'ink') {
            @include key.bind-token('on-primary', map.get($primary, 'ink'), $prefix);
        } @else {
            @include key.bind-token('on-primary', color-getters.get-ink($primary), $prefix);
        }
    } @else {
        @include key.bind-token('on-primary', color-getters.get-ink(color-parsers.split($primary)), $prefix);
    }

    @if meta.type-of($secondary) == map {
        @if Feature.has-property($secondary, 'ink') {
            @include key.bind-token('on-secondary', map.get($secondary, 'ink'), $prefix);
        } @else {
            @include key.bind-token('on-secondary', color-getters.get-ink($secondary), $prefix);
        }
    } @else {
        @include key.bind-token('on-secondary', color-getters.get-ink(color-parsers.split($secondary)), $prefix);
    }

    @each $property, $value in $_state-map {
        @include key.bind-token($property, list.nth($value, 1), $prefix);
    }

    @each $property, $value in $_state-map {
        @include key.bind-token('on-#{$property}', list.nth($value, 2), $prefix);
    }

    @each $property, $value in $radius {
        @include key.bind-token('#{$property}-radius', $value, $prefix);
    }

    /* ===== */
    @each $property, $value in meta.keywords($user-tokens) {
        @include key.bind-token($property, $value, $prefix);
    }

}
