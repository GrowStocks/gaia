//
//  Copyright (c) 2021 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';

@use '../Feature';
@use '../Tools';
@use '../Theme/theme-keys' as key;

@use 'typography-validators' as validator;
@use 'typography-defaults' as defaults;
@use 'typography-getters' as getter;

$_valid-typography-queries: (
    'font-size',
    'font-weight',
    'letter-spacing',
    'text-decoration',
    'text-transform'
);

$prefix: 'sc' !default;

@mixin config(
    $global: (),
    $title: (
        'family': map.get($global, 'family')
    ),
    $subtitle: (
        'family': map.get($global, 'family')
    ),
    $body: (
        'family': map.get($global, 'family')
    )
) {
    
    $_merged-global: map.merge(defaults.$init-global, $global);
    $_merged-title: map.merge(defaults.$init-title, $title);
    $_merged-subtitle: map.merge(defaults.$init-subtitle, $subtitle);
    $_merged-body: map.merge(defaults.$init-body, $body);
    
    *:not(code) {
        @include getter.get-family($_merged-global);
        @include getter.get-weight($_merged-global);
        color: inherit;
        
        &::before,
        &::after {
            @include getter.get-family($_merged-global);
            @include getter.get-weight($_merged-global);
            color: inherit;
        }
    }
    
    a {
        text-decoration: none;
        outline: none;
    }
    
    h1,
    h2,
    h3 {
        @include getter.get-family($_merged-title, 'title', $prefix);
        @include getter.get-weight($_merged-title, 'title', $prefix);
    }
    
    h4,
    h5,
    h6 {
        @include getter.get-family($_merged-subtitle, 'subtitle', $prefix);
        @include getter.get-weight($_merged-subtitle, 'subtitle', $prefix);
    }
    
    p {
        @include getter.get-family($_merged-body, 'body', $prefix);
        @include getter.get-weight($_merged-body, 'body', $prefix);
    }
    
    b {
        font-weight: 700;
        color: inherit;
    }
    
    code,
    .code {
        font-family: "Source Code Pro", monospace;
    }
    
    html {
        font-size: 100%;
    }
}

@mixin apply($component-name, $typography-theme) {
    $_valid-typography-theme: Feature.validate-data-type('map', $typography-theme);
    
    @if $_valid-typography-theme {
        
        @if Feature.has-property($typography-theme, 'size') {
            font-size: key.create('#{$component-name}-text-size', Tools.px-to-rem(map.get($typography-theme, 'size')), $prefix);
        }
        
        @if Feature.has-property($typography-theme, 'weight') {
            font-weight: key.create('#{$component-name}-text-weight', map.get($typography-theme, 'weight'), $prefix);
        }
        
        @if Feature.has-property($typography-theme, 'spacing') {
            $_letter-spacing: map.get($typography-theme, 'spacing');
            letter-spacing: key.create('#{$component-name}-text-spacing', getter.get-letter-spacing($_letter-spacing), $prefix);
        }
        
        @if Feature.has-property($typography-theme, 'decoration') {
            text-decoration: key.create('#{$component-name}-text-decoration', map.get($typography-theme, 'decoration'), $prefix);
        }
        
        @if Feature.has-property($typography-theme, 'transform') {
            text-transform: key.create('#{$component-name}-text-transform', map.get($typography-theme, 'transform'), $prefix);
        }
        
    }
    
}
