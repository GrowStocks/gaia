//
//  MIT License
//
//  Copyright (c) 2021 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use '../mixins';
@use 'sass:map';
@use '../Typography' as typography;

@mixin base(
    $component-name: (),
    $base-padding: undefined,

    $base-fill: undefined,
    $base-ink: undefined,

    $base-font-size: undefined,
    $base-font-weight: undefined,

    $base-icon-size: undefined,
    $base-icon-ink: undefined,

    $base-shape: default,
    $base-shape-exceptions: undefined,

    $base-border: none,
    $base-border-radius: undefined,
    $base-clip-size: undefined,
    $base-custom-clip: ()
) {

    $base-display: inline-block;

    .#{unquote($component-name)} {
        width: 100%;
        background: $base-fill;

        @include mixins.shape($base-shape, $base-border-radius, $base-clip-size, $base-shape-exceptions, $base-custom-clip);

        color: $base-ink;
        border: $base-border;
        padding: $base-padding;
        display: flex;
        flex-flow: row nowrap;
        justify-content: flex-start;
        align-items: center;

        .alert__icon {
            display: $base-display;
            font-size: typography.px-to-rem($base-icon-size);
            margin-right: 5px;
            color: $base-icon-ink;
        }

        .alert__text {
            display: $base-display;
            color: $base-ink;
            font-size: typography.px-to-rem($base-font-size);
        }
    }
}

@mixin render(
    $padding: 0.3rem 0.5rem,
    $border-radius: 0.3rem,
    $fill: var(--primary-light),
    $ink: var(--on-primary),
    $icon-ink: var(--on-primary),
    $border: none,
    $border-fill: $fill,
    $shape: default,
    $clip-size: 0.5rem,
    $shape-exceptions: (),
    $custom-clip: (),
    $font-size: 14px,
    $icon-size: 20px,
    $font-weight: 400,
    $type: ()
) {

    $types: (
        'success': var(--success),
        'warning': var(--warning),
        'error': var(--error),
        'undefined': var(--undefined),
        'default': $fill
    );

    $inks: (
        'success': var(--on-success),
        'warning': var(--on-warning),
        'error': var(--on-error),
        'undefined': var(--on-undefined),
        'default': $ink
    );

    @each $state, $list-fill in $types {

        $separator: '--';
        $list-ink: map.get($inks, $state);

        @if($state == 'default') {
            $separator: '';
            $state: '';
        }

        $_name: quote(alert#{$separator}#{$state});
        $_name-outlined: quote(alert--outlined#{$separator}#{$state});

        @if check($type, filled) == true {
            @include base(
                $component-name: $_name,
                $base-padding: $padding,
                $base-border-radius: $border-radius,
                $base-border: 1px solid #{$list-fill},
                $base-fill: $list-fill,
                $base-ink: $list-ink,
                $base-icon-ink: $list-ink,
                $base-font-size: $font-size,
                $base-font-weight: $font-weight,
                $base-icon-size: $icon-size,
                $base-shape: $shape,
                $base-shape-exceptions: (),
                $base-clip-size: $clip-size,
                $base-custom-clip: $custom-clip
            );
        }

        @if check($type, outlined) {
            @include base(
                $component-name: $_name-outlined,
                $base-padding: $padding,
                $base-border-radius: $border-radius,
                $base-border: 1px solid #{$list-fill},
                $base-fill: var(--clear),
                $base-ink: $ink,
                $base-icon-ink: $icon-ink,
                $base-font-size: $font-size,
                $base-font-weight: $font-weight,
                $base-icon-size: $icon-size,
                $base-shape: $shape,
                $base-shape-exceptions: (
                    clipped: true
                ),
                $base-clip-size: $clip-size,
                $base-custom-clip: $custom-clip
            );
        }
    }
}

@function check($map, $to-check) {
    $query: map.get($map, $to-check);

    @return $query;
}