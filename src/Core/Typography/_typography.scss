//
//  Copyright (c) 2021 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';

@use '../Feature';

$_valid-typography-queries: (
    'font-size',
    'font-weight',
    'letter-spacing',
    'text-decoration',
    'text-transform'
);

@mixin config(
    $global-font: (),
    $global-font-type: sans-serif,
    // TITLE (1,2,3)
    $title-font: $global-font,
    $title-font-type: $global-font-type,
    $title-font-weight: 700,
    // SUBTITLE (4,5,6)
    $subtitle-font: $global-font,
    $subtitle-font-type: $global-font-type,
    $subtitle-font-weight: 400,
    // BODY (p...)
    $body-font: $global-font,
    $body-font-type: $global-font-type,
    $body-font-weight: 400
) {

    @if meta.type-of($global-font) == map {

        @error 'This feature will be implemented on Stack v2.3.0. Until then, please be prepared for a lot of breaking changes when upgrading. :>';

    }

    //
    // NOTE for v2.3.0
    //  Abstract the parameters of the mixin to maps, it's easier that way :>
    //  DO NOT FORGET IT YOU ABSOLUTE BAFOON! (I'm talking to you Matt)
    //

    * {
        @include font-family($global-font, $global-font-type);

        &::before,
        &::after {
            @include font-family($global-font, $global-font-type);
        }
    }

    a {
        text-decoration: none;
        outline: none;
    }

    h1,
    h2,
    h3 {
        font-weight: $title-font-weight;
        @include font-family($title-font, $title-font-type);
    }

    h4,
    h5,
    h6 {
        font-weight: $subtitle-font-weight;
        @include font-family($subtitle-font, $subtitle-font-type);
    }

    p {
        font-weight: $body-font-weight;
        @include font-family($body-font, $body-font-type);
    }

    b {
        font-weight: 700;
        color: inherit;
    }

    html {
        font-size: 100%;
    }
}

@mixin apply($typography-theme) {
    $_valid-typography-theme: Feature.validate-data-type('map', $typography-theme);

    @if $_valid-typography-theme {

        @if Feature.has-property($typography-theme, 'font-size') {
            $_font-size: px-to-rem(map.get($typography-theme, 'font-size'));
            font-size: $_font-size;
        }

        @if Feature.has-property($typography-theme, 'font-weight') {
            $_font-weight: map.get($typography-theme, 'font-weight');
            font-weight: $_font-weight;
        }

        @if Feature.has-property($typography-theme, 'letter-spacing') {
            $_letter-spacing: map.get($typography-theme, 'letter-spacing');
            letter-spacing: get-letter-spacing($_letter-spacing);
        }

        @if Feature.has-property($typography-theme, 'text-decoration') {
            $_text-decoration: map.get($typography-theme, 'text-decoration');
            text-decoration: $_text-decoration;
        }

        @if Feature.has-property($typography-theme, 'text-transform') {
            $_text-transform: map.get($typography-theme, 'text-transform');
            text-transform: $_text-transform;
        }

    }
}

@mixin font-family($family, $type: sans-serif) {
    font-family: quote($family), $type;
}

@function get-typography_($typography-map, $query) {
    $valid: is-typography_($_valid-typography-queries, $query);
    @if not $valid {
        //
    }
    @return map.get($typography-map, $query);
}

@function is-typography_($query) {
    @if Feature.has-item($_valid-typography-queries, $query) {
        @return true
    } @else {
        @return false
    }
}

@function px-to-rem($px) {
    @return (math.div($px, 16px) * 1rem);
}

@function get-letter-spacing($font-size) {
    @return ($font-size / 16px) * 1rem;
}
