//
//  Copyright (c) 2021 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';

@use '../Feature';

$valid-shapes: (default, rounded, block, pill); // temporarily removed 'clipped' as a shape due to bugs

@mixin apply(
    $shape-theme: (),
) {
    // Separate into variables
    $_imported-shape: map.get($shape-theme, 'shape');
    $_backwards-compatability-radius: map.get($shape-theme, 'border-radius');
    $_imported-border-radius: map.get($shape-theme, 'radius');
    $_imported-shape-exceptions: map.get($shape-theme, 'shape-exceptions');
    $_imported-clip-size: map.get($shape-theme, 'clip-size');
    $_imported-custom-clip: map.get($shape-theme, 'custom-clip');

    // Check if shape is valid from $valid-shapes list.
    @if not Feature.has-item($valid-shapes, $_imported-shape) {
        @error 'Invalid shape: #{$_imported-shape}! Please select from the following: #{$valid-shapes}.';
    }

    @if Feature.has-item($_imported-shape-exceptions, $_imported-shape) {
        @error 'The #{$_imported-shape} shape is currently disabled in this component. Please try other shapes.';
    }

    @if $_backwards-compatability-radius {
        @warn 'The property "border-radius" will be depricated on Stack v2.2.0. Please change it to "radius" for future compatability';
    }

    // PILL
    @if $_imported-shape == pill {
        border-radius: 500px;
    }

    // ROUNDED
    @if $_imported-shape == rounded {
        @if $_backwards-compatability-radius {
            border-radius: $_backwards-compatability-radius;
        }
        @if $_imported-border-radius {
            border-radius: $_imported-border-radius;
        }
    }

    // BLOCK
    @if $_imported-shape == block {
        border-radius: 0;
    }

    // CLIPPED (Disabled 'clipped' shape)
    // @location: _DEPRICATED.scss

    // DEFAULT
    @if $_imported-shape == default {
        @if $_backwards-compatability-radius {
            border-radius: $_backwards-compatability-radius;
        }
        @if $_imported-border-radius {
            border-radius: $_imported-border-radius;
        }
    }
}

// =================
// Package Internals
// =================

@function is-empty_($value) {
    @return Feature.is-empty($value);
}

@function is-shape_($shape) {
    @return list.index($valid-shapes, $shape)
}

// @depricated
@function depricated-get-shape($map) {
    $settings: (
        map.get($map, shape),
        map.get($map, border-radius),
        map.get($map, clip-size),
        map.get($map, shape-exceptions),
        map.get($map, custom-clip)
    );
    @return $settings
}
// @depricated
@function inject($map, $property) {
    $verify: list.index($map, $property);

    @if $verify {
        @return map.get($map, $property)
    } @else {
        @return null;
    }
}
