//
//  Copyright (c) 2021 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';

@use '../Feature';

$valid-shapes: (rounded, block, pill); // temporarily removed 'clipped' as a shape due to bugs

@mixin apply(
    $shape-theme: (),
) {
    // Separate into variables
    $_imported-shape: map.get($shape-theme, shape);
    $_imported-border-radius: map.get($shape-theme, border-radius);
    $_imported-shape-exceptions: map.get($shape-theme, shape-exceptions);
    $_imported-clip-size: map.get($shape-theme, clip-size);
    $_imported-custom-clip: map.get($shape-theme, custom-clip);

    // Check if shape is valid from $valid-shapes list.
    @if not Feature.item-exists($valid-shapes, $_imported-shape) {
        @error 'Invalid shape: #{$_imported-shape}! Please select from the following: #{$valid-shapes}.';
    } @else {

        // PILL
        @if Feature.item-exists($_imported-shape-exceptions, pill) {
            @if $_imported-shape == pill {
                @error 'The pill shape is currently disabled in this component, please try other shapes.';
            }
        } @else {
            @if $_imported-shape == pill {
                border-radius: 500px;
            }
        }

        // ROUNDED
        @if Feature.item-exists($_imported-shape-exceptions, rounded) {
            @if $_imported-shape == rounded {
                @error 'The round shape is currently disabled in this component, please try other shapes.';
            }
        } @else {
            @if $_imported-shape == rounded {
                @if $_imported-border-radius {
                    border-radius: $_imported-border-radius;
                }
            }
        }

        // BLOCK
        @if Feature.item-exists($_imported-shape-exceptions, block) {
            @if $_imported-shape == block {
                @error 'The block shape is currently disabled in this component, please try other shapes.';
            }
        } @else {
            @if $_imported-shape == block {
                border-radius: 0;
            }
        }

        // CLIPPED (Disabled 'clipped' shape)
        //@if check_($_imported-shape-exceptions, clipped) {
        //    @if $_imported-shape == clipped {
        //        @error 'The clipped shape is currently disabled in this component, please try other shapes.';
        //    }
        //} @else {
        //    @if $_imported-shape == clipped and $_imported-clip-size {
        //        @if $_imported-clip-size {
        //            @if not empty_($_imported-custom-clip) {
        //               clip-path: $_imported-custom-clip;
        //            } @else {
        //                clip-path:
        //                    polygon(
        //                        0% $_imported-clip-size,
        //                        $_imported-clip-size 0%, calc(100% - #{$_imported-clip-size}) 0%,
        //                        100% $_imported-clip-size,
        //                        100% calc(100% - #{$_imported-clip-size}),
        //                        calc(100% - #{$_imported-clip-size}) 100%,
        //                        $_imported-clip-size 100%,
        //                        0% calc(100% - #{$_imported-clip-size})
        //                    )
        //               ;
        //            }
        //        }
        //    }
        //}
        // DEFAULT
        @if $_imported-shape == default {
            @if $_imported-border-radius {
                border-radius: $_imported-border-radius;
            }
        }
    }
}

// =================
// Package Internals
// =================

@function empty_($value) {
    @if not $value
       or $value == ''
       or $value == 0
       or $value == ()
       or $value == none
       or $value == null
       or length($value) == 0 {
        @return true;
    }
    @return false;
}

@function check_($shape-exception-map, $exception) {
    $_imported-shape-exceptions: $shape-exception-map;
    $query: list.index($_imported-shape-exceptions, $exception);
    @return $query;
}

@function verify-shape_($shape) {
    @return list.index($valid-shapes, $shape)
}

// @depricated
@function depricated-get-shape($map) {
    $settings: (
        map.get($map, shape),
        map.get($map, border-radius),
        map.get($map, clip-size),
        map.get($map, shape-exceptions),
        map.get($map, custom-clip)
    );
    @return $settings
}
// @depricated
@function inject($map, $property) {
    $verify: list.index($map, $property);

    @if $verify {
        @return map.get($map, $property)
    } @else {
        @return null;
    }
}
