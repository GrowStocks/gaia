//
//  Copyright (c) 2021 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:color';

@use '../Feature';
@use '../Elevation';

$_valid-color-types: (
    'default',
    'hover',
    'focus',
    'active',
    'disabled',
    'elevation'
);

$_valid-scopes: (
    'text',
    'outlined',
    'filled'
);

@mixin apply($scope, $color-theme, $scope-exceptions: ()) {
    $_scope: get-scope_($scope);
    $_scope-exceptions: $scope-exceptions;
    $_elevation-color: get-color_($color-theme, 'fill', 'elevation');
    // @future
    $_application-settings: ();

    // Handles scope-exceptions map
    @if Feature.item-exists($_scope-exceptions, $_scope) {
        @error 'The color scope #{$_scope} is disabled in this component. Please select another color scope.'
    }

    // $_scope == text
    @if Feature.item-exists($_scope, 'text') {
        color: get-color_($color-theme, 'fill', 'default');
        border: none;
        background: hsl(0 0% 0% / 0);
        @include Elevation.apply(0, $_elevation-color);

        @if Feature.property-exists($color-theme, 'hover') {
            &:hover {
                color: get-color_($color-theme, 'fill', 'hover');
                cursor: pointer;
            }
        }

        @if Feature.property-exists($color-theme, 'focus') {
            &:focus {
                color: get-color_($color-theme, 'fill', 'focus');
                cursor: pointer;
                //outline: solid rgba(#005cb1, 50%);
            }
        }

        @if Feature.property-exists($color-theme, 'active') {
            &:active {
                color: get-color_($color-theme, 'fill', 'active');
                cursor: pointer;
            }
        }

        @if Feature.property-exists($color-theme, 'disabled') {
            &:disabled {
                color: get-color_($color-theme, 'fill', 'disabled')
            }
        }
    }

    // $_scope == outlined
    @if Feature.item-exists($_scope, 'outlined') {
        color: get-color_($color-theme, 'fill', 'default');
        border: 1px solid get-color_($color-theme, 'fill', 'default');
        background: rgba(0 0 0 / 0);
        @include Elevation.apply(0, $_elevation-color);

        @if Feature.property-exists($color-theme, 'hover') {
            &:hover {
                color: get-color_($color-theme, 'ink', 'default');
                background: get-color_($color-theme, 'fill', 'default');
                border: 1px solid get-color_($color-theme, 'fill', 'default');
                cursor: pointer;
                @include Elevation.apply(3, $_elevation-color);
            }
        }

        @if Feature.property-exists($color-theme, 'focus') {
            &:focus {
                color: get-color_($color-theme, 'ink', 'focus');
                background: get-color_($color-theme, 'fill', 'focus');
                border: 1px solid get-color_($color-theme, 'fill', 'focus');
                cursor: pointer;
                @include Elevation.apply(3, $_elevation-color);
            }
        }

        @if Feature.property-exists($color-theme, 'active') {
            &:active {
                color: get-color_($color-theme, 'ink', 'active');
                background: get-color_($color-theme, 'fill', 'active');
                border: 1px solid get-color_($color-theme, 'fill', 'active');
                cursor: pointer;
                @include Elevation.apply(7, $_elevation-color);
            }
        }

        @if Feature.property-exists($color-theme, 'disabled') {
            &:disabled {
                color: get-color_($color-theme, 'fill', 'disabled');
                border: 1px solid get-color_($color-theme, 'fill', 'disabled');

                &:hover {
                    background: rgba(0 0 0 / 0%);
                }
            }
        }
    }

    // $_scope == filled
    @if Feature.item-exists($_scope, 'filled') {
        color: get-color_($color-theme, 'ink', 'default');
        border: 1px solid get-color_($color-theme, 'fill', 'default');
        background: get-color_($color-theme, 'fill', 'default');
        @include Elevation.apply(3, $_elevation-color);

        @if Feature.property-exists($color-theme, 'hover') {
            &:hover {
                color: get-color_($color-theme, 'ink', 'hover');
                border: 1px solid get-color_($color-theme, 'fill', 'hover');
                background: get-color_($color-theme, 'fill', 'hover');
                cursor: pointer;
                @include Elevation.apply(5, $_elevation-color);
            }
        }

        @if Feature.property-exists($color-theme, 'focus') {
            &:focus {
                color: get-color_($color-theme, 'ink', 'focus');
                border: 1px solid get-color_($color-theme, 'fill', 'focus');
                background: get-color_($color-theme, 'fill', 'focus');
                cursor: pointer;
                @include Elevation.apply(5, $_elevation-color);
            }
        }

        @if Feature.property-exists($color-theme, 'active') {
            &:active {
                color: get-color_($color-theme, 'ink', 'active');
                border: 1px solid get-color_($color-theme, 'fill', 'active');
                background: get-color_($color-theme, 'fill', 'active');
                cursor: pointer;
                @include Elevation.apply(10, $_elevation-color);
            }
        }

        @if Feature.property-exists($color-theme, 'disabled') {
            &:disabled {
                color: get-color_($color-theme, 'ink', 'disabled');
                border: 1px solid get-color_($color-theme, 'fill', 'disabled');
                background: get-color_($color-theme, 'fill', 'disabled');
                @include Elevation.apply(2, $_elevation-color);

                &:hover {
                    cursor: not-allowed;
                }
            }
        } @else {
            &:disabled {
                color: var(--on-undefined);
                border: 1px solid var(--undefined);
                background: var(--undefined);
                @include Elevation.apply(2, $_elevation-color);
            }
        }
    }
}

@function color-split($color) {

    $_split-default: $color;

    $_split-light: lighten(desaturate($_split-default, 30%), 20%);
    $_split-dark: darken($_split-default, 12.5%);

    $_split-fill-map: (
        'light': $_split-light,
        'default': $_split-default,
        'dark': $_split-dark
    );

    @return $_split-fill-map;

}

@function get-scope_($scope) {
    $valid: is-scope_($scope);
    @if $valid == false {
        //
    } @else {
        @return $scope
    }
}

@function get-color_($color-map, $list-selector, $color) {
    $valid: is-color-type_($color);
    $valid-map: is-map_($color-map);
    @if $valid == false {
        @if $valid-map == false {
            //
        }
    } @else {
        $_color-map: map.get($color-map, $color);

        @if $list-selector == 'fill' {
            @return list.nth($_color-map, 1);
        } @else if $list-selector == 'ink' {
            @return list.nth($_color-map, 2);
        } @else {
            @error 'Invalid selector: #{$list-selector}. Please choose from the following valid selectors: "fill", "ink".'
        }
    }
}

@function is-scope_($scope) {
    @if not list.index($_valid-scopes, $scope) {
        @error 'Invalid scope: #{$scope}. Please select from the following scopes: #{$_valid-scopes}';
    }

    @return true
}

@function is-color-type_($color-type) {
    @if not list.index($_valid-color-types, $color-type) {
        @error 'Invalid color: #{$color-type}. Please select from the following color types: #{$_valid-color-types}';
    }

    @return true
}

@function is-map_($map) {
    @if meta.type-of($map) != map {
        @error 'Invalid map: #{$map}. Expecting a map.';
    }

    @return true;
}

// Special function for $fill properties
@function get-ink($fill) {
    @if lightness($fill) < 30% {
        $ink: #fff;
        @return $ink;
    } @else {
        $ink: #000;
        @return $ink;
    }
}

@function has-value_($color-map, $color) {
    @if map.has-key($color-map, $color) {
        @return true
    } @else {
        @return false
    }
}

// @depricated
@function color-get-complement($color) {
    $_complement: saturate(lighten($color, 30%), 0%);
    @return adjust-hue($_complement, 180deg);
}

// @depricated
@function color-darken($color) {
    @return darken($color, 12.5%);
}

// @depricated
@function color-lighten($color) {
    @return lighten(desaturate($color, 30%), 20%);
}
