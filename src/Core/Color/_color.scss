//
//  Copyright (c) 2021 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:color';

@use '../Feature';
@use '../Elevation';

$_valid-color-queries: (
    'default',
    'hover',
    'focus',
    'active',
    'disabled',
    'elevation',
    'ripple',
    'scrollable'
);

$_valid-scopes: (
    'text',
    'outlined',
    'filled'
);

$_valid-query-settings: (
    'has-elevation',
    'no-elevation'
);

@mixin apply(
    $scope,
    $color-theme,
    $scope-exceptions: (),
    $query-settings: (
        'has-elevation'
    )
) {
    $_scope: get-scope_($scope);
    $_scope-exceptions: $scope-exceptions;
    $_query-settings: $query-settings;
    $_elevation-color: ();

    @if not map.has-key($color-theme, 'elevation') {
        $_elevation-color: #000;
    } @else {
        $_elevation-color: _get-color($color-theme, 'fill', 'elevation');
    }

    // Handles scope-exceptions map
    @if Feature.has-item($_scope-exceptions, $_scope) {
        @error 'The color scope #{$_scope} is disabled in this component. Please select another color scope.';
    }

    // $_scope == text
    @if Feature.has-item($_scope, 'text') {
        color: _get-color($color-theme, 'fill', 'default');
        border: none;
        background: hsl(0 0% 0% / 0);
        @include Elevation.apply(0, $_elevation-color);

        @if Feature.has-property($color-theme, 'hover') {
            &:hover {
                color: _get-color($color-theme, 'fill', 'hover');
                cursor: pointer;
            }
        }

        @if Feature.has-property($color-theme, 'focus') {
            &:focus {
                color: _get-color($color-theme, 'fill', 'focus');
                cursor: pointer;
                //outline: solid rgba(#005cb1, 50%);
            }
        }

        @if Feature.has-property($color-theme, 'active') {
            &:active {
                color: _get-color($color-theme, 'fill', 'active');
                cursor: pointer;
            }
        }

        @if Feature.has-property($color-theme, 'disabled') {
            &:disabled {
                color: _get-color($color-theme, 'fill', 'disabled');
            }
        }
    }

    // $_scope == outlined
    @if Feature.has-item($_scope, 'outlined') {
        color: _get-color($color-theme, 'fill', 'default');
        border: 1px solid _get-color($color-theme, 'fill', 'default');
        background: rgba(0 0 0 / 0);
        @include Elevation.apply(0, $_elevation-color);

        @if Feature.has-property($color-theme, 'hover') {
            &:hover {
                color: _get-color($color-theme, 'ink', 'default');
                background: _get-color($color-theme, 'fill', 'default');
                border: 1px solid _get-color($color-theme, 'fill', 'default');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(3, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'focus') {
            &:focus {
                color: _get-color($color-theme, 'ink', 'focus');
                background: _get-color($color-theme, 'fill', 'focus');
                border: 1px solid _get-color($color-theme, 'fill', 'focus');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(3, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'active') {
            &:active {
                color: _get-color($color-theme, 'ink', 'active');
                background: _get-color($color-theme, 'fill', 'active');
                border: 1px solid _get-color($color-theme, 'fill', 'active');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(7, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'disabled') {
            &:disabled {
                color: _get-color($color-theme, 'fill', 'disabled');
                border: 1px solid _get-color($color-theme, 'fill', 'disabled');

                &:hover {
                    background: rgba(0 0 0 / 0%);
                }
            }
        }
    }

    // $_scope == filled
    @if Feature.has-item($_scope, 'filled') {
        color: _get-color($color-theme, 'ink', 'default');
        border: 1px solid _get-color($color-theme, 'fill', 'default');
        background: _get-color($color-theme, 'fill', 'default');

        @if Feature.has-item($_query-settings, 'has-elevation') {
            @include Elevation.apply(3, $_elevation-color);
        }

        @if Feature.has-property($color-theme, 'hover') {
            &:hover {
                color: _get-color($color-theme, 'ink', 'hover');
                border: 1px solid _get-color($color-theme, 'fill', 'hover');
                background: _get-color($color-theme, 'fill', 'hover');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(5, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'focus') {
            &:focus {
                color: _get-color($color-theme, 'ink', 'focus');
                border: 1px solid _get-color($color-theme, 'fill', 'focus');
                background: _get-color($color-theme, 'fill', 'focus');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(5, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'active') {
            &:active {
                color: _get-color($color-theme, 'ink', 'active');
                border: 1px solid _get-color($color-theme, 'fill', 'active');
                background: _get-color($color-theme, 'fill', 'active');
                cursor: pointer;

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(10, $_elevation-color);
                }
            }
        }

        @if Feature.has-property($color-theme, 'disabled') {
            &:disabled {
                color: _get-color($color-theme, 'ink', 'disabled');
                border: 1px solid _get-color($color-theme, 'fill', 'disabled');
                background: _get-color($color-theme, 'fill', 'disabled');

                @if Feature.has-item($_query-settings, 'has-elevation') {
                    @include Elevation.apply(2, $_elevation-color);
                }

                &:hover {
                    cursor: not-allowed;
                }
            }
        }
    }
}

@function split($color) {

    $_split-default: $color;

    $_split-light: lighten(desaturate($_split-default, 30%), 20%);
    $_split-dark: darken($_split-default, 12.5%);

    $_split-fill-map: (
        'light': $_split-light,
        'default': $_split-default,
        'dark': $_split-dark
    );

    @return $_split-fill-map;

}

@function fill-missing($properties, $colors) {

    @if Feature.validate-data-type('map', $colors) {

        @if not Feature.has-property($colors, 'default') {

            @error 'Missing crucial property "default". Please provide the "default" property and its value before overriding the other values';

        }

        @if not Feature.has-item($properties, 'light') and Feature.has-item($properties, 'dark') {

            $_split-light: lighten(desaturate(map.get($colors, 'default'), 30%), 20%);

            $_split-map: (
                'light': $_split-light,
                'default': map.get($colors, 'default'),
                'dark': map.get($colors, 'dark')
            );

            @return $_split-map;

        } @else if not Feature.has-item($properties, 'dark') and Feature.has-item($properties, 'light') {

            $_split-dark: darken(map.get($colors, 'default'), 12.5%);

            $_split-map: (
                'light': map.get($colors, 'light'),
                'default': map.get($colors, 'default'),
                'dark': $_split-dark
            );

            @return $_split-map;

        } @else if not Feature.has-item($properties, 'dark') and not Feature.has-item($properties, 'light') {

            @return split(map.get($colors, 'default'));

        } @else {

            @return $colors;

        }

    }

    @return $colors;

}

// @depricated
// Not removed for backwards compatability
@function color-split($color) {

    @return split($color);

}

@function get-scope_($scope) {
    $valid: is-scope_($scope);
    @if $valid == false {
        //
    } @else {
        @return $scope;
    }
}

@function _get-color($color-map, $list-query, $query) {

    $valid: is-color-type_($query);
    $valid-map: is-map_($color-map);
    @if $valid == false {
        @if $valid-map == false {
            //
        }
    } @else {
        $_color-map: map.get($color-map, $query);

        @if $list-query == 'fill' {
            @return list.nth($_color-map, 1);
        } @else if $list-query == 'ink' {
            @return list.nth($_color-map, 2);
        } @else {
            @error 'Invalid query: #{$list-query}. Please choose from the following valid selectors: "fill", "ink".';
        }
    }

}

// for backwards compatability + library internal extends Components
@function get-color_($color-map, $list-query, $query) {

    @return _get-color($color-map, $list-query, $query);

}

@function is-scope_($scope) {
    @if not list.index($_valid-scopes, $scope) {
        @error 'Invalid scope: #{$scope}. Please select from the following scopes: #{$_valid-scopes}';
    }

    @return true;
}

@function is-color-type_($color-type) {
    @if not list.index($_valid-color-queries, $color-type) {
        @error 'Invalid color query: #{$color-type}. Please select from the following color queries: #{$_valid-color-queries}';
    }

    @return true;
}

@function is-map_($map) {
    @if meta.type-of($map) != map {
        @error 'Invalid map: #{$map}. Expecting a map.';
    }

    @return true;
}

//
// Library internal functions (DO NOT USE!)
//

@function get-ink_($fill) {
    @if is-map_($fill) {
        @if lightness(map.get($fill, 'default')) < 30% {
            $ink: #fff;
            @return $ink;
        } @else {
            $ink: #000;
            @return $ink;
        }
    }
}

@function get-complement_($color) {
    $_complement: saturate(lighten($color, 30%), 0%);
    @return adjust-hue($_complement, 180deg);
}
