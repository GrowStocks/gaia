///
//  Copyright (c) 2022 GrowStocks
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
///

@use '../kardia';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'consts';
@use 'util-helpers' as helpers;

$_breakpoints: consts.$breakpoints;
$_variants: (
  'none',
  'auto',
  'xs',
  'sm',
  'md',
  'lg',
  'xl',
  '2xl',
  '3xl',
  '4xl',
  '5xl',
  '6xl',
);
$_directions: (
  't': top,
  'l': left,
  'b': bottom,
  'r': right,
  'x': (left, right),
  'y': (top, bottom)
);
$_r-directions: (
  'tl': top-left,
  'tr': top-right,
  'br': bottom-right,
  'bl': bottom-left,
  't': (top-left, top-right),
  'l': (top-left, bottom-left),
  'b': (bottom-left, bottom-right),
  'r': (top-right, bottom-right),
);
$_dimensions: (
  'none',
  'full',
  'xs',
  'sm',
  'md',
  'lg',
  'xl',
  'sprite',
);
$_stroke-size: (
  'none',
  'xs',
  'sm',
  'md',
  'lg',
  'xl'
);
$_stroke-style: (
  'none',
  'solid',
  'dashed',
  'dotted',
  'double'
);

@mixin struct($include: (), $exclude: ()) {
  $utils-to-render: helpers.handle-include-exclude((
    'w',
    'h',
    'p',
    'm',
    'r',
    'border-width',
    'border-style'
  ), $include, $exclude);

  @each $dimension in $_dimensions {
    @if list.index($utils-to-render, 'w') {
      // Width
      .w-#{$dimension} {
        width: kardia.key-create('util-w', kardia.primitive-token-get('width.#{$dimension}'));
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:w-#{$dimension} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-w', kardia.primitive-token-get('width.#{$dimension}'));
          }
        }
      }

      // Min Width
      .min-w-#{$dimension} {
        min-width: kardia.key-create('util-min-w', kardia.primitive-token-get('width.#{$dimension}'));
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:min-w-#{$dimension} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-min-w', kardia.primitive-token-get('width.#{$dimension}'));
          }
        }
      }

      // Max Width
      .max-w-#{$dimension} {
        max-width: kardia.key-create('util-max-w', kardia.primitive-token-get('width.#{$dimension}'));
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:max-w-#{$dimension} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-max-w', kardia.primitive-token-get('width.#{$dimension}'));
          }
        }
      }
    }

    @if list.index($utils-to-render, 'h') {
      // Height
      .h-#{$dimension} {
        height: kardia.key-create('util-h', kardia.primitive-token-get('height.#{$dimension}'));
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:h-#{$dimension} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-h', kardia.primitive-token-get('height.#{$dimension}'));
          }
        }
      }

      // Min Height
      .min-h-#{$dimension} {
        min-height: kardia.key-create('util-min-h', kardia.primitive-token-get('height.#{$dimension}'));
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:min-h-#{$dimension} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-min-h', kardia.primitive-token-get('height.#{$dimension}'));
          }
        }
      }

      // Max Height
      .max-h-#{$dimension} {
        max-height: kardia.key-create('util-max-h', kardia.primitive-token-get('height.#{$dimension}'));
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:max-h-#{$dimension} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-max-h', kardia.primitive-token-get('height.#{$dimension}'));
          }
        }
      }
    }
  }

  @each $variant in $_variants {
    @if list.index($utils-to-render, 'p') {
      // Padding
      .p-#{$variant} {
        padding: kardia.key-create('util-p', kardia.primitive-token-get('padding.#{$variant}'));
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:p-#{$variant} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-p', kardia.primitive-token-get('padding.#{$variant}'));
          }
        }
      }

      @each $direction, $direction-val in $_directions {
        .p#{$direction}-#{$variant} {
          @each $sub-direction in $direction-val {
            padding-#{$sub-direction}: kardia.key-create('util-p#{$direction}', kardia.primitive-token-get('padding.#{$variant}'));
          }
        }

        @each $breakpoint in $_breakpoints {
          .\@#{$breakpoint}\:p#{$direction}-#{$variant} {
            @include kardia.breakpoint-create($breakpoint) {
              @each $sub-direction in $direction-val {
                @include kardia.key-bind('util-p#{$direction}', kardia.primitive-token-get('padding.#{$variant}'));
              }
            }
          }
        }
      }
    }

    @if list.index($utils-to-render, 'm') {
      // Margin
      .m-#{$variant} {
        margin: kardia.key-create('util-m', kardia.primitive-token-get('margin.#{$variant}'));
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:m-#{$variant} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-m', kardia.primitive-token-get('margin.#{$variant}'));
          }
        }
      }

      @each $direction, $direction-val in $_directions {
        .m#{$direction}-#{$variant} {
          @each $sub-direction in $direction-val {
            margin-#{$sub-direction}: kardia.key-create('util-m#{$direction}', kardia.primitive-token-get('margin.#{$variant}'));
          }
        }

        @each $breakpoint in $_breakpoints {
          .\@#{$breakpoint}\:m#{$direction}-#{$variant} {
            @include kardia.breakpoint-create($breakpoint) {
              @each $sub-direction in $direction-val {
                @include kardia.key-bind('util-m#{$direction}', kardia.primitive-token-get('margin.#{$variant}'));
              }
            }
          }
        }
      }
    }

    @if list.index($utils-to-render, 'r') {
      // Border Radius
      @if $variant == 'auto' {
        // Do nothing
      } @else {
        .r-#{$variant} {
          border-radius: kardia.key-create('util-r', kardia.primitive-token-get('radius.#{$variant}'));
        }

        @each $breakpoint in $_breakpoints {
          .\@#{$breakpoint}\:r-#{$variant} {
            @include kardia.breakpoint-create($breakpoint) {
              @include kardia.key-bind('util-r', kardia.primitive-token-get('radius.#{$variant}'));
            }
          }
        }

        @each $direction, $direction-val in $_r-directions {
          .r#{$direction}-#{$variant} {
            @each $sub-direction in $direction-val {
              border-#{$sub-direction}-radius: kardia.key-create('util-r#{$direction}', kardia.primitive-token-get('radius.#{$variant}'));
            }
          }

          @each $breakpoint in $_breakpoints {
            .\@#{$breakpoint}\:r#{$direction}-#{$variant} {
              @include kardia.breakpoint-create($breakpoint) {
                @each $sub-direction in $direction-val {
                  @include kardia.key-bind('util-r#{$direction}', kardia.primitive-token-get('radius.#{$variant}'));
                }
              }
            }
          }
        }
      }
    }
  }

  @if list.index($utils-to-render, 'border-width') {
    @each $variant in $_stroke-size {
      // Border Width
      .border-#{$variant} {
        border-width: kardia.key-create('util-border-width', kardia.primitive-token-get('border.#{$variant}'));
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:border-#{$variant} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-border-width', kardia.primitive-token-get('border.#{$variant}'));
          }
        }
      }
    }
  }

  @if list.index($utils-to-render, 'border-style') {
    @each $variant in $_stroke-style {
      // Border Style
      .border-#{$variant} {
        border-style: kardia.key-create('util-border-style', $variant);
      }

      @each $breakpoint in $_breakpoints {
        .\@#{$breakpoint}\:border-#{$variant} {
          @include kardia.breakpoint-create($breakpoint) {
            @include kardia.key-bind('util-border-style', $variant);
          }
        }
      }
    }
  }
}